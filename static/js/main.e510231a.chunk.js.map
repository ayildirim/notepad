{"version":3,"sources":["withTracker.js","Config.js","Pages/Main.js","AppRouter.js","App.js","registerServiceWorker.js","index.js"],"names":["withTracker","WrappedComponent","extraProps","arguments","length","undefined","options","trackPage","page","ReactGA","set","Object","objectSpread","pageview","_Component","HOC","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","inherits","createClass","key","value","props","location","pathname","nextProps","currentPage","nextPage","react_default","a","createElement","assign","Component","API_URL","Main","state","data","message","idToUpdate","objectToUpdate","getDataFromDb","fetch","concat","then","json","res","_this","setState","putDataToDB","axios","post","refreshUI","deleteFromDB","idTodelete","delete","_id","updateDB","updateToApply","id","update","_this2","Container_default","Row_default","className","Col_default","md","Card_default","Body","Title","Form_default","Group","controlId","Control","as","rows","onChange","e","target","placeholder","Button_default","onClick","map","dat","variant","style","padding","type","width","Pages","component","link","AppRouter","call","HashRouter","Navbar_default","bg","expand","Brand","href","Alert_default","esm","OutboundLink","eventLabel","to","Toggle","aria-controls","Route","path","exact","str","replace","match","chr","toUpperCase","App","initialize","testMode","process","src_AppRouter","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","origin","addEventListener","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.e510231a.chunk.js","sourcesContent":["/**\n * From ReactGA Community Wiki Page https://github.com/react-ga/react-ga/wiki/React-Router-v4-withTracker\n */\n\nimport React, { Component } from 'react';\nimport ReactGA from 'react-ga';\n\nexport default function withTracker(WrappedComponent, extraProps = {}, options = {}) {\n  const trackPage = (page) => {\n    ReactGA.set({\n      page,\n      ...options,\n    });\n    ReactGA.pageview(page);\n  };\n\n  const HOC = class extends Component {\n    componentDidMount() {\n      const page = this.props.location.pathname;\n      trackPage(page);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const currentPage = this.props.location.pathname;\n      const nextPage = nextProps.location.pathname;\n\n      if (currentPage !== nextPage) {\n        trackPage(nextPage);\n      }\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...extraProps} />;\n    }\n  };\n\n  return HOC;\n}\n","export const API_URL = process.env.NODE_ENV === 'development' ? 'http://localhost:3001' : 'http://notepad.ahmet.se:3001'","import React, { Component } from 'react';\nimport axios from 'axios';\nimport Container from 'react-bootstrap/lib/Container';\nimport Button from 'react-bootstrap/lib/Button';\nimport Card from 'react-bootstrap/lib/Card';\nimport Col from 'react-bootstrap/lib/Col';\nimport Row from 'react-bootstrap/lib/Row';\nimport Form from 'react-bootstrap/lib/Form';\nimport { API_URL } from '../Config';\n\nclass Main extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    message: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n    return (\n      <Container>\n        <Row className=\"justify-content-md-center\">\n          <Col md={12}>\n            <Card>\n              <Card.Body>\n                <Card.Title>\n                  <Form.Group controlId=\"exampleForm.ControlTextarea1\">\n                    <Form.Control\n                      as=\"textarea\"\n                      rows=\"3\"\n                      onChange={e => this.setState({ message: e.target.value })}\n                      placeholder=\"add something in the database\"\n                    />\n                  </Form.Group>\n                </Card.Title>\n                <Button onClick={() => this.putDataToDB(this.state.message)}>Save</Button>\n              </Card.Body>\n            </Card>\n          </Col>\n          {data.length <= 0\n            ? 'You have not taken any notes.'\n            : data.map(dat => (\n              <Col md={12}>\n                <Card>\n                  <Card.Body>\n                    <Card.Title>{dat.message}</Card.Title>\n                    <Button variant=\"danger\" onClick={() => this.deleteFromDB(dat._id)}>\n                        Delete\n                    </Button>\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n        </Row>\n        <div style={{ padding: '10px' }}>\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\n            placeholder=\"id of item to update here\"\n          />\n          <input\n            type=\"text\"\n            style={{ width: '200px' }}\n            onChange={e => this.setState({ updateToApply: e.target.value })}\n            placeholder=\"put new value of the item here\"\n          />\n          <button onClick={() => this.updateDB(this.state.idToUpdate, this.state.updateToApply)}>\n            UPDATE\n          </button>\n        </div>\n      </Container>\n    );\n  }\n\n  componentDidMount() {\n    this.refreshUI();\n  }\n\n  refreshUI() {\n    this.getDataFromDb();\n  }\n\n  getDataFromDb = () => {\n    fetch(`${API_URL}/api/getData`)\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  putDataToDB = (message) => {\n    axios.post(`${API_URL}/api/putData`, {\n      message,\n    });\n    this.refreshUI();\n  };\n\n  deleteFromDB = (idTodelete) => {\n    axios.delete(`${API_URL}/api/deleteData`, {\n      data: {\n        _id: idTodelete,\n      },\n    });\n    this.refreshUI();\n  };\n\n  updateDB = (idToUpdate, updateToApply) => {\n    axios.post(`${API_URL}/api/updateData`, {\n      id: idToUpdate,\n      update: { message: updateToApply },\n    });\n    this.refreshUI();\n  };\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Nav from 'react-bootstrap/lib/Nav';\nimport Navbar from 'react-bootstrap/lib/Navbar';\nimport Alert from 'react-bootstrap/lib/Alert';\nimport ReactGA from 'react-ga';\nimport withTracker from './withTracker';\n\n// Pages\nimport Main from './Pages/Main';\n\nconst Pages = [{ component: Main, link: 'Home' }];\n\nconst camelize = function camelize(str) {\n  return str.replace(/\\W+(.)/g, (match, chr) => chr.toUpperCase());\n};\n\nclass AppRouter extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand href=\"/#/home\">Notepad</Navbar.Brand>\n            <Alert key=\"info\" variant=\"info\">\n              {'Under construction - '}\n              <ReactGA.OutboundLink\n                eventLabel=\"https://github.com/ayildirim/notepad\"\n                to=\"https://github.com/ayildirim/notepad\"\n                target=\"_blank\"\n              >\n                See what's cooking\n              </ReactGA.OutboundLink>\n            </Alert>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          </Navbar>\n          <Route path=\"/\" exact component={withTracker(Main)} />\n          {Pages.map(page => (\n            <Route path={`/${camelize(page.link)}`} exact component={withTracker(page.component)} />\n          ))}\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default AppRouter;\n","import React, { Component } from 'react';\nimport ReactGA from 'react-ga';\n\nimport AppRouter from './AppRouter';\n\nclass App extends Component {\n  componentDidMount() {\n    ReactGA.initialize('UA-129029377-1', { testMode: process.env.NODE_ENV === 'test' });\n  }\n\n  render() {\n    return <AppRouter />;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://goo.gl/SC7cgQ',\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404\n        || response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.scss';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}